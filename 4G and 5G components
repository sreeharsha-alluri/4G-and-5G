4G Components Open5gs setup in AWS EC2 ubuntu machines


Installing Minikube

curl https://get.docker.com | sudo bash

sudo apt install -y curl wget apt-transport-https

wget https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64

sudo cp minikube-linux-amd64 /usr/local/bin/minikube

sudo chmod +x /usr/local/bin/minikube

curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-
release/release/stable.txt`/bin/linux/amd64/kubectl

sudo chmod +x kubectl

sudo mv kubectl /usr/local/bin/

sudo usermod -aG docker $(whoami)

sudo reboot

git clone https://github.com/sreeharsha-alluri/Open5gs

ls

cd Open5gs/

ls

cd charts/

cd open5gs/

ls

curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3

chmod 700 get_helm.sh

./get_helm.sh

cd ..

goto this path and then enter the command

~/Open5gs/charts/open5gs

helm dependency update

cd ..

goto this path and then enter the command

~/Open5gs/charts

helm install open5gs open5gs/

kubectl get pods

kubectl get pods -o wide

kubectl port-forward --address=0.0.0.0 svc/open5gs-webui 8888:3000 &

public ip v4 address : 8888

login name : admin
password : 1423


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

4G Components Deployment in Jenkins Pipeline

Jenkins Dashboard --> Manage Jenkins --> Manage Nodes and Clouds

Add New Node

Name : slave-2

Description: 4g

Number of executors: 1

Remote root directory: /home/ubuntu/jenkins

Labels: slave-2

Usage: Use this node as much as possible

Launch Method:  Launch agents via SSH

Host : Copy the IP address of 4G components EC2 Machine

Credentials: Click on + sign

             Kind: SSH username with private key

Private Key : Enter directly and paste the pem file key

Under host key verification strategy select : Manually trusted key verification strategy

While running the script for the first time

node('slave-2'){
    stage('cloning'){
        sh 'rm -rf Open5gs-old'
        sh 'mv Open5gs Open5gs-old'
        sh 'git clone https://github.com/sreeharsha-alluri/Open5gs.git'
    }
    stage('deployment'){
        sh 'pwd'
        sh 'helm dependency update /home/ubuntu/jenkins/workspace/4g-components/Open5gs/charts/open5gs'
        
        sh 'helm install open5gs /home/ubuntu/jenkins/workspace/4g-components/Open5gs/charts/open5gs/'
    }
}


For the second tike while execution comment the code as follows


node('slave-2'){
    stage('cloning'){
        sh 'rm -rf Open5gs-old'
        sh 'mv Open5gs Open5gs-old'
        sh 'git clone https://github.com/sreeharsha-alluri/Open5gs.git'
    }
    stage('deployment'){
        sh 'pwd'
        sh 'helm dependency update /home/ubuntu/jenkins/workspace/4g-components/Open5gs/charts/open5gs'
        
        sh 'helm install open5gs /home/ubuntu/jenkins/workspace/4g-components/Open5gs/charts/open5gs/'
    }
}



In case if the pipeline throws any errors
Goto the ec2 machine where 4G components are present

helm ls

helm un open5gs

Then re-run the pipeline script again

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

5G Components setup in AWS EC2 ubuntu machines


minikube start

df -h

clear

ls

git clone -b master https://gitlab.eurecom.fr/oai/cn5g/oai-cn5g-fed

cd charts/oai-5g-core/oai-5g-basic

ls

cd oai-cn5g-fed/

ls

cd charts/

ls

cd oai-5g-core/

cd oai-5g-basic/

ls

helm dependency update

curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3

./get_helm.sh

clear

ls

mv get_helm.sh /

ls

helm plugin install https://github.com/ThalesGroup/helm-spray

ls

helm plugin list

clear

ls

cd ..

ls

cd oai-5g-basic/

helm dependency update

cd ..

ls

helm spray .

cd oai-5g-basic/

helm spray .

clear

ls

cd ..

ls

cd ..

ls

cd oai-5g-ran/

ls

export AMF_POD_NAME=$(kubectl get pods -l "app.kubernetes.io/name=oai-amf" -o jsonpath="{.items[0].metadata.name}")

export SMF_POD_NAME=$(kubectl get pods -l "app.kubernetes.io/name=oai-smf" -o jsonpath="{.items[0].metadata.name}")

export SPGWU_TINY_POD_NAME=$(kubectl get pods -l "app.kubernetes.io/name=oai-spgwu-tiny" -o jsonpath="{.items[0].metadata.name}")

export AMF_eth0_POD_IP=$(kubectl get pods -l "app.kubernetes.io/name=oai-amf" -o jsonpath="{.items[0].status.podIP}")

ls

kubectl logs -c spgwu $SPGWU_TINY_POD_NAME | grep 'Received SX HEARTBEAT REQUEST' | wc -l

kubectl logs -c smf $SMF_POD_NAME | grep 'handle_receive(16 bytes)' | wc -l

cd oai-gnb

ls

nano values.yaml

kubectl get pods

kubectl get pods -o wide

nano values.yaml

pwd

cd ..

ls

sed -i 's/amfIpAddress: "172.17.0.8"/amfIpAddress: '"$AMF_eth0_POD_IP"'/g' oai-gnb/values.yaml

helm install gnb oai-gnb

export GNB_POD_NAME=$(kubectl get pods --namespace default -l "app.kubernetes.io/name=oai-gnb,app.kubernetes.io/instance=gnb" -o jsonpath="{.items[0].metadata.name}")

export GNB_POD_NAME=$(kubectl get pods  -l "app.kubernetes.io/name=oai-gnb,app.kubernetes.io/instance=gnb" -o jsonpath="{.items[0].metadata.name}")

export GNB_eth0_IP=$(kubectl get pods -l "app.kubernetes.io/name=oai-gnb,app.kubernetes.io/instance=gnb" -o jsonpath="{.items[*].status.podIP}")

kubectl logs -c amf $AMF_POD_NAME | grep 'Sending NG_SETUP_RESPONSE Ok'

kubectl get pods

sed -i 's/rfSimulator: "172.17.0.9"/rfSimulator: '"$GNB_eth0_IP"'/g' oai-nr-ue/values.yaml

ls

helm install nrue oai-nr-ue/

export NR_UE_POD_NAME=$(kubectl get pods --namespace default -l "app.kubernetes.io/name=oai-nr-ue,app.kubernetes.io/instance=nrue" -o jsonpath="{.items[0].metadata.name}")

export NR_UE_POD_NAME=$(kubectl get pods -l "app.kubernetes.io/name=oai-nr-ue,app.kubernetes.io/instance=nrue" -o jsonpath="{.items[0].metadata.name}")

kubectl exec -it -c nr-ue $NR_UE_POD_NAME -- /bin/bash

ping -I oaitun_ue1 -c4 google.fr


----------------------------------------------------------------------------------------------------------------------------------------------------------------------

5G Components JenkinsPipeline

Configure the master slave architecture in Jenkins.

node('slave1'){
    stage('cloning'){
        sh 'rm -rf 5g-core-components_old'
        sh 'mv 5g-core-components 5g-core-components_old'
        withCredentials([gitUsernamePassword(credentialsId: '767ca0fa-bbe6-4a5e-b9da-19241537664d', gitToolName: 'Default')]) {
            sh 'git clone https://github.com/DaggupatiPavan/5g-core-components.git'
        }
        sh 'pwd'
    }
    stage('Building Docker Images'){
        sh "docker build --target oai-amf --tag 671134929989.dkr.ecr.us-east-1.amazonaws.com/oai-amf:v1.4.${BUILD_NUMBER} --file 5g-core-components/component/oai-amf/docker/Dockerfile.amf.ubuntu18 --build-arg BASE_IMAGE=ubuntu:focal 5g-core-components/component/oai-amf "                       
        sh "docker build --target oai-smf --tag 671134929989.dkr.ecr.us-east-1.amazonaws.com/oai-smf:v1.4.${BUILD_NUMBER} --file 5g-core-components/component/oai-smf/docker/Dockerfile.smf.ubuntu18 --build-arg BASE_IMAGE=ubuntu:22.04 5g-core-components/component/oai-smf "
        sh "docker build --target oai-nrf --tag 671134929989.dkr.ecr.us-east-1.amazonaws.com/oai-nrf:v1.4.${BUILD_NUMBER} --file 5g-core-components/component/oai-nrf/docker/Dockerfile.nrf.ubuntu18 --build-arg BASE_IMAGE=ubuntu:jammy 5g-core-components/component/oai-nrf "
        sh "docker build --target oai-spgwu-tiny --tag 671134929989.dkr.ecr.us-east-1.amazonaws.com/oai-spgwu-tiny:v1.4.${BUILD_NUMBER} --file 5g-core-components/component/oai-upf-equivalent/docker/Dockerfile.ubuntu18.04 --build-arg BASE_IMAGE=ubuntu:20.04 5g-core-components/component/oai-upf-equivalent "
        sh "docker build --target oai-ausf --tag 671134929989.dkr.ecr.us-east-1.amazonaws.com/oai-ausf:v1.4.${BUILD_NUMBER} --file 5g-core-components/component/oai-ausf/docker/Dockerfile.ausf.ubuntu18 5g-core-components/component/oai-ausf "
        sh "docker build --target oai-udm --tag 671134929989.dkr.ecr.us-east-1.amazonaws.com/oai-udm:v1.4.${BUILD_NUMBER}   --file 5g-core-components/component/oai-udm/docker/Dockerfile.udm.ubuntu18 5g-core-components/component/oai-udm "
        sh "docker build --target oai-udr --tag 671134929989.dkr.ecr.us-east-1.amazonaws.com/oai-udr:v1.4.${BUILD_NUMBER}   --file 5g-core-components/component/oai-udr/docker/Dockerfile.udr.ubuntu18 5g-core-components/component/oai-udr "
        // sh "docker build --target oai-upf-vpp --tag 671134929989.dkr.ecr.us-east-1.amazonaws.com/oai-upf-vpp:v1.4.${BUILD_NUMBER} --file 5g-core-components/oai-components/component/oai-upf-vpp/docker/Dockerfile.upf-vpp.ubuntu 5g-core-components/oai-components/component/oai-upf-vpp"
        // sh "docker build --target oai-nssf --tag 671134929989.dkr.ecr.us-east-1.amazonaws.com/oai-nssf:v1.4.${BUILD_NUMBER} --file 5g-core-components/oai-components/component/oai-nssf/docker/Dockerfile.nssf.ubuntu18 5g-core-components/oai-components/component/oai-nssf "
        // sh "docker build --target trf-gen-cn5g --tag 671134929989.dkr.ecr.us-east-1.amazonaws.com/trf-gen-cn5g:v1.4.${BUILD_NUMBER} --file 5g-core-components/oai-components/ci-scripts/Dockerfile.traffic.generator.ubuntu18.04 . "
        echo "done"
    }
    stage('Removing old Docker Images'){
        sh 'docker rmi 671134929989.dkr.ecr.us-east-1.amazonaws.com/oai-amf:v1.4.$((${BUILD_NUMBER} -1))'
        sh 'docker rmi 671134929989.dkr.ecr.us-east-1.amazonaws.com/oai-smf:v1.4.$((${BUILD_NUMBER} -1))'
        sh 'docker rmi 671134929989.dkr.ecr.us-east-1.amazonaws.com/oai-nrf:v1.4.$((${BUILD_NUMBER} -1))'
        sh 'docker rmi 671134929989.dkr.ecr.us-east-1.amazonaws.com/oai-spgwu-tiny:v1.4.$((${BUILD_NUMBER} -1))'
        sh 'docker rmi 671134929989.dkr.ecr.us-east-1.amazonaws.com/oai-ausf:v1.4.$((${BUILD_NUMBER} -1))'
        sh 'docker rmi 671134929989.dkr.ecr.us-east-1.amazonaws.com/oai-udm:v1.4.$((${BUILD_NUMBER} -1))'
        sh 'docker rmi 671134929989.dkr.ecr.us-east-1.amazonaws.com/oai-udr:v1.4.$((${BUILD_NUMBER} -1))'
    }
    stage('Vulnerability Scan for Docker images'){
        sh 'grype docker:671134929989.dkr.ecr.us-east-1.amazonaws.com/oai-amf:v1.4.${BUILD_NUMBER} >> oai-amf:v1.4.${BUILD_NUMBER}'
        sh 'cat oai-amf:v1.4.${BUILD_NUMBER}'
        sh 'grype docker:671134929989.dkr.ecr.us-east-1.amazonaws.com/oai-smf:v1.4.${BUILD_NUMBER} >> oai-smf:v1.4.${BUILD_NUMBER}' 
        sh 'cat oai-smf:v1.4.${BUILD_NUMBER}'
        sh 'grype docker:671134929989.dkr.ecr.us-east-1.amazonaws.com/oai-nrf:v1.4.${BUILD_NUMBER} >> oai-nrf:v1.4.${BUILD_NUMBER}'
        sh 'cat oai-nrf:v1.4.${BUILD_NUMBER}'
        sh 'grype docker:671134929989.dkr.ecr.us-east-1.amazonaws.com/oai-spgwu-tiny:v1.4.${BUILD_NUMBER} >>  oai-spgwu-tiny:v1.4.${BUILD_NUMBER}'
        sh 'cat oai-spgwu-tiny:v1.4.${BUILD_NUMBER}'
        sh 'grype docker:671134929989.dkr.ecr.us-east-1.amazonaws.com/oai-ausf:v1.4.${BUILD_NUMBER} >>  oai-ausf:v1.4.${BUILD_NUMBER}'
        sh 'cat oai-ausf:v1.4.${BUILD_NUMBER}'
        sh 'grype docker:671134929989.dkr.ecr.us-east-1.amazonaws.com/oai-udm:v1.4.${BUILD_NUMBER} >>  oai-udm:v1.4.${BUILD_NUMBER}'
        sh 'cat oai-udm:v1.4.${BUILD_NUMBER}'
        sh 'grype docker:671134929989.dkr.ecr.us-east-1.amazonaws.com/oai-udr:v1.4.${BUILD_NUMBER} >>  oai-udr:v1.4.${BUILD_NUMBER}'
        sh 'cat oai-udr:v1.4.${BUILD_NUMBER}'
        // sh 'grype docker:671134929989.dkr.ecr.us-east-1.amazonaws.com/oai-upf-vpp:v1.4.${BUILD_NUMBER} >> oai-upf-vpp:v1.4.${BUILD_NUMBER}'
        // sh 'grype docker:671134929989.dkr.ecr.us-east-1.amazonaws.com/oai-nssf:v1.4.${BUILD_NUMBER} >> oai-nssf:v1.4.${BUILD_NUMBER}'
        // sh 'grype docker:671134929989.dkr.ecr.us-east-1.amazonaws.com/trf-gen-cn5g:v1.4.${BUILD_NUMBER} >> trf-gen-cn5g:v1.4.${BUILD_NUMBER}'
    }
    stage('Pushing images to ECR'){
        sh 'aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 671134929989.dkr.ecr.us-east-1.amazonaws.com'
        sh 'docker push 671134929989.dkr.ecr.us-east-1.amazonaws.com/oai-amf:v1.4.${BUILD_NUMBER}'
        sh 'docker push 671134929989.dkr.ecr.us-east-1.amazonaws.com/oai-smf:v1.4.${BUILD_NUMBER}'
        sh 'docker push 671134929989.dkr.ecr.us-east-1.amazonaws.com/oai-nrf:v1.4.${BUILD_NUMBER}'
        sh 'docker push 671134929989.dkr.ecr.us-east-1.amazonaws.com/oai-spgwu-tiny:v1.4.${BUILD_NUMBER}'
        sh 'docker push 671134929989.dkr.ecr.us-east-1.amazonaws.com/oai-ausf:v1.4.${BUILD_NUMBER}'
        sh 'docker push 671134929989.dkr.ecr.us-east-1.amazonaws.com/oai-udm:v1.4.${BUILD_NUMBER}'
        sh 'docker push 671134929989.dkr.ecr.us-east-1.amazonaws.com/oai-udr:v1.4.${BUILD_NUMBER}'
    }
    stage('Deploying 5g-core-components'){
        sh "sed -i 's/v1.4.0/v1.4.${BUILD_NUMBER}/g' 5g-core-components/charts/oai-5g-core/oai-amf/values.yaml"
        sh "sed -i 's/v1.4.0/v1.4.${BUILD_NUMBER}/g' 5g-core-components/charts/oai-5g-core/oai-smf/values.yaml"
        sh "sed -i 's/v1.4.0/v1.4.${BUILD_NUMBER}/g' 5g-core-components/charts/oai-5g-core/oai-nrf/values.yaml"
        sh "sed -i 's/v1.4.0/v1.4.${BUILD_NUMBER}/g' 5g-core-components/charts/oai-5g-core/oai-spgwu-tiny/values.yaml"
        sh "sed -i 's/v1.4.0/v1.4.${BUILD_NUMBER}/g' 5g-core-components/charts/oai-5g-core/oai-ausf/values.yaml"
        sh "sed -i 's/v1.4.0/v1.4.${BUILD_NUMBER}/g' 5g-core-components/charts/oai-5g-core/oai-udm/values.yaml"
        sh "sed -i 's/v1.4.0/v1.4.${BUILD_NUMBER}/g' 5g-core-components/charts/oai-5g-core/oai-udr/values.yaml"
        
        sh 'helm install amf 5g-core-components/charts/oai-5g-core/oai-amf/'
        sh 'helm install smf 5g-core-components/charts/oai-5g-core/oai-smf/'
        sh 'helm install nrf 5g-core-components/charts/oai-5g-core/oai-nrf/'
        sh 'helm install spgwu-tiny 5g-core-components/charts/oai-5g-core/oai-spgwu-tiny/'
        sh 'helm install ausf 5g-core-components/charts/oai-5g-core/oai-ausf/'
        sh 'helm install udm 5g-core-components/charts/oai-5g-core/oai-udm/'
        sh 'helm install udr 5g-core-components/charts/oai-5g-core/oai-udr/'
        
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

